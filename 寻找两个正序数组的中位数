//这代码还没看懂 这题好难
package leetcode;
import java.util.*;
import java.math.*;
import java.io.*;

public class Solution {
	   public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
		   int m = nums1.length;
		   int n = nums2.length;
		   int l = (m + n + 1) / 2;
		   int r = (m + n + 2) / 2;
		   return (findK(nums1, 0, nums2, 0, l) + findK(nums1, 0, nums2, 0, r)) / 2.0;
	    }
	   
	   public static int findK(int[] nums1, int i, int[] nums2, int j, int k) {
		   if(i >= nums1.length) return nums2[j + k - 1];
		   if(j >= nums2.length) return nums1[i + k - 1];
		   if(k == 1) return Math.min(nums1[i], nums2[j]);
		   int mid1 = (i + k / 2 - 1 < nums1.length) ? nums1[i + k / 2 - 1] : Integer.MAX_VALUE;
		   int mid2 = (j + k / 2 - 1 < nums2.length) ? nums2[j + k / 2 - 1] : Integer.MAX_VALUE;
		   if(mid1 < mid2) return findK(nums1, i + k / 2, nums2, j, k - k / 2);
		   else return findK(nums1, i, nums2, j + k / 2, k - k / 2);
	   }
	 
	 public static void main(String[] args){
		int[] nums1 = {1,2};
		int[] nums2 = {3,4};
		double ans = findMedianSortedArrays(nums1, nums2);
		System.out.println(ans);
	}
}

