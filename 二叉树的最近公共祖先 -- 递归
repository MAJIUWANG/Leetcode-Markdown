Java版本：
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		if(root == null || root == p || root == q) return root;
		TreeNode left = lowestCommonAncestor(root.left, p , q);
		TreeNode right = lowestCommonAncestor(root.right, p , q);
		if(left == null && right == null) return null;
		if(left == null) return right;
		if(right == null) return left;
        return root;
    }

Python版本：
class Solution:
    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:
        if root == None: return None
        if root == p or root == q:
            return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left != None and right != None:
            return root
        if right != None:
            return right
        if left != None:
            return left
        else: return None
