package leetcode;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {
    public int[][] kClosest(int[][] points, int K) {
    	PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {
    		public int compare(int[] p1, int[] p2) {
    			return p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1];
    		}
    	});
    	for(int i = 0; i < K; i++) {
    		pq.offer(points[i]);
    	}
    	int n = points.length;
    	for(int i = K; i < n; i++) {
    		int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];
    		int temp = pq.peek()[0] * pq.peek()[0] + pq.peek()[1] * pq.peek()[1];
    		if(dist < temp) {
    			pq.poll();
    			pq.offer(points[i]);
    		}
    	}
    	int[][] ans = new int[K][2];
    	for(int i = 0; i < K; i++) {
    		ans[i] = pq.poll();
    	}
    	return ans;
    }
}

