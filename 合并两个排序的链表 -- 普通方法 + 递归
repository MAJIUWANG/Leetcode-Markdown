# 法1 普通方法
# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        temp = ListNode(0)
        head = temp
        while l1 != None and l2 != None:
            if l1.val >= l2.val:
                temp.next = ListNode(l2.val)
                temp = temp.next
                l2 = l2.next
            else:
                temp.next = ListNode(l1.val)
                temp = temp.next
                l1 = l1.next
        if l1 != None:
            temp.next = l1
        if l2 != None:
            temp.next = l2
        return head.next



if __name__ == '__main__':
    so= Solution()
    x1 = ListNode(1)
    x2 = ListNode(2)
    x3 = ListNode(4)
    x1.next = x2
    x2.next = x3
    x4 = ListNode(1)
    x5 = ListNode(3)
    x6 = ListNode(4)
    x4.next = x5
    x5.next = x6
    ans = so.mergeTwoLists(x1, x4)
    while ans != None:
        print(ans.val)
        ans = ans.next

# 法2 递归
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        if l1 == None:
            return l2
        if l2 == None:
            return l1
        if l1.val <= l2.val:
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2


