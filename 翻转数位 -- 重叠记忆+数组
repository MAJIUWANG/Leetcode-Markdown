法1： 巧妙方法，空间复杂度O(1)
class Solution(object):
    def reverseBits(self, num):
        curlen = 0
        prelen = 0
        maxlen = 0
        bits = 32
        while bits:
            if num & 1 == 0:
                curlen -= prelen
                prelen = curlen + 1
            curlen += 1
            maxlen = max(maxlen, curlen)
            bits -= 1
            num >>= 1
        return maxlen

法2： 数组
class Solution(object):
    def reverseBits(self, num):
        if num < 0: #处理负数的情况
            num = (2**32 - 1) + num + 1
        numCount = [0 for i in range(32)]
        idx = 0
        while num > 0:
            if num & 1 == 1:
                numCount[idx] += 1
            else:
                idx += 1
            num >>= 1
        maxans = 0
        for i in range(idx+1):
            maxans = max(maxans, numCount[i]+numCount[i+1]+1)
        return maxans if maxans < 32 else 32
